library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Generic_Counter is
	generic(		U : 	unsigned := "1001";
					D :	unsigned := "1001"
		);
	port(
			enable, reset, clkin, Count	:	in 	std_logic;
			countend								:	out 	std_logic;
			display0, display1				:	out 	std_logic_vector(3 downto 0);
		);

end entity;

architecture Behavioral of Generic_Counter is

signal decimal_counter_up, decimal_top : std_logic;

begin

countend <= '1' When (decimal_top = '1' and decimal_counter_up = '1') else '0';

counter0:	entity work.fourbitsCounter(Behavioral)
					generic map(
						N => U
					)
					port map(
						enable 					=> enable,
						enable_generic_max 	=> decimal_top,
						clkin						=>	clkin,
						count						=> Count,
						reset  					=> reset,
						nextDigit				=>	decimal_counter_up,
						dataOut 					=>	display0			
					);
					
counter1:	entity work.fourbitsCounter(Behavioral)
					generic map(
						N => D
					)
					port map(
						enable 					=> s_next_digit_down0,
						enable_generic_max 	=> '1',
						clkin						=>	clkin,
						count						=> decimal_counter_up,	
						reset  					=> reset,
						nextDigit				=>	decimal_top,
						dataOut 					=>	display1			
					);

end architecture;